/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package DeviceController;

import SmartHome.LoginForm;
import MainDisplay.MainDisplay;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;

/**
 *
 * @author LG
 */
public class GUI_Command extends javax.swing.JFrame {

    String uId = LoginForm.SessionID; // 사용자 아이디
    
    RemoteControl remote = new RemoteControl(); // 인보커 생성 - 명령을 저장하고 관리.
    Command none = new NoCommand(); // 명령이 없음을 표시하는 널 객체

    Refrigerator kitchenRefrigerator = new Refrigerator("Kitchen"); //  리시버 생성 - 명령의 실제 처리를 수행.
    Heating livingRoomHeating = new Heating("Living Room"); // 거실 난방 리시버 생성
    Heating room1Heating = new Heating("Room1"); // 침실1 난방 리시버 생성
    Led livingRoomLed = new Led("Living Room"); // 거실 LED 리시버 생성
    Led room1Led = new Led("Room1"); // 침실1 LED 리비서 생성

    int usedRefEnergy = 0; // 냉장고 사용 에너지
    int usedHeatingEnergyLivingRoom=0;  // 거실 난방기 사용 에너지
    int usedHeatingEnergyRoom1=0; // 침실 난방기 사용 에너지
    int usedLedEnergyLivingRoom=0; // 거실 LED조명 사용 에너지
    int usedLedEnergyRoom1=0; // 침실 LED조명 사용 에너지
    
    public static int usedEnergy;  // 총 사용 에너지

    String refOnOffState = "OFF"; // 냉장고 전원 상태
    String heatingLivingRoomOnOffState = "OFF"; // 거실 난방기 전원 상태
    String heatingRoom1OnOffState = "OFF"; // 침실 난방기 전원 상태
    String ledLivingRoomOnOffState = "OFF"; // 거실 LED 전원 상태
    String ledRoom1OnOffState = "OFF"; // 침실 LED 전원 상태

    public enum Receiver { // 리시버 - 난방기(0), LED조명(1), 냉장고(2)
        HEATING, LED, REF
    }

    public GUI_Command() {
        
       usedEnergy = Integer.parseInt(File_Command.read(LoginForm.SessionID)); // 현재 로그인 한 사용자의 누적 전기 사용량(기기 제어)

        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setVisible(true);
        
        commandMainLabel.setText(LoginForm.SessionID + "님의 누적 전기 사용량");
        usedELabel.setText(usedEnergy + "kwh"); // 누적 사용 전기량

        setting(); // 각 서브 프레임(냉장고 제어, LED 제어, 난방기 제어) 첫 화면 텍스트 및 슬라이더 설정

    }

    public void setting() { // 서브 프레임 첫 화면 텍스트 및 슬라이더 설정
        refTempLabel.setText("" + 0); // 냉장고 초기 온도
        refOnOffLabel.setText("OFF"); // 냉장고 초기 전원 상태

        ledLivingRoomTempLabel.setText("" + 0); // 거실 LED 초기 밝기
        ledLivingRoomOnOffLabel.setText(ledLivingRoomOnOffState); // 거실 LED 초기 전원 상태
        
        ledRoom1TempLabel.setText("" + 0); // 침실 LED 초기 밝기
        ledRoom1OnOffLabel.setText(ledRoom1OnOffState); // 침실 LED 초기 전원 상태
        
        heatingLivingRoomTempLabel.setText("" + 0); // 거실 난방기 초기 온도
        livingRoomLabel2.setText(heatingLivingRoomOnOffState); // 거실 난방기 초기 전원 상태

        heatingRoom1TempLabel.setText("" + 0); // 침실 난방기 초기 온도
        heatingRoom1OnOffLabel.setText(heatingRoom1OnOffState); // 침실 난방기 초기 전원 상태 

        // 냉장고 온도 조절 슬라이더
        refSlider.setMajorTickSpacing(1); //큰 눈금 간격 5로 설정 
        refSlider.setPaintTicks(true); //눈금을 표시한다.
        refSlider.setPaintLabels(true);

        // 거실 LED 밝기 조절 슬라이더
        ledLivingRoomSlider.setMajorTickSpacing(1); //큰 눈금 간격 5로 설정
        ledLivingRoomSlider.setPaintTicks(true); //눈금을 표시한다.
        ledLivingRoomSlider.setPaintLabels(true);

        // 침실 LED 밝기 조절 슬라이더
        ledRoom1Slider.setMajorTickSpacing(1); //큰 눈금 간격 5로 설정
        ledRoom1Slider.setPaintTicks(true); //눈금을 표시한다.
        ledRoom1Slider.setPaintLabels(true);

        // 거실 난방기 온도 조절 슬라이더
        heatingLivingRoomSlider.setMajorTickSpacing(5); //큰 눈금 간격 5로 설정
        heatingLivingRoomSlider.setPaintTicks(true); //눈금을 표시한다.
        heatingLivingRoomSlider.setPaintLabels(true);
        
        // 침실 난방기 온도 조절 슬라이더
        heatingRoom1Slider.setMajorTickSpacing(5); //큰 눈금 간격 5로 설정
        heatingRoom1Slider.setPaintTicks(true); //눈금을 표시한다.
        heatingRoom1Slider.setPaintLabels(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refFrame = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        refSlider = new javax.swing.JSlider();
        refOnBtn = new javax.swing.JButton();
        refOffBtn = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        refTempLabel = new javax.swing.JLabel();
        refOnOffLabel = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        refELabel = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        ledFrame = new javax.swing.JFrame();
        jLabel29 = new javax.swing.JLabel();
        ledRoom1OnOffLabel = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        ledLivingRoomTempLabel = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        ledLivingRoomOnOffLabel = new javax.swing.JLabel();
        ledRoom1Slider = new javax.swing.JSlider();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        ledOnRoom1Btn = new javax.swing.JButton();
        ledELabel = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        ledOffRoom1Btn = new javax.swing.JButton();
        ledLivingRoomSlider = new javax.swing.JSlider();
        jLabel38 = new javax.swing.JLabel();
        ledOnLivingRoomBtn = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        ledOffLivingRoomBtn = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        ledRoom1TempLabel = new javax.swing.JLabel();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        heatingFrame = new javax.swing.JFrame();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        heatingLivingRoomSlider = new javax.swing.JSlider();
        heatingOnLivingRoomBtn = new javax.swing.JButton();
        heatingOffLivingRoomBtn = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        heatingLivingRoomTempLabel = new javax.swing.JLabel();
        livingRoomLabel2 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        heatingOnRoom1Btn = new javax.swing.JButton();
        heatingOffRoom2Btn = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        heatingRoom1TempLabel = new javax.swing.JLabel();
        heatingRoom1OnOffLabel = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        heatingRoom1Slider = new javax.swing.JSlider();
        jLabel28 = new javax.swing.JLabel();
        heatingELabel = new javax.swing.JLabel();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jLabel20 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btn_heatingCommand = new javax.swing.JButton();
        btn_ledCommand = new javax.swing.JButton();
        btn_refCommand = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        commandMainLabel = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        usedELabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        refFrame.setBackground(new java.awt.Color(0, 255, 51));

        jLabel2.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel2.setText("냉장고 제어");

        jLabel3.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel3.setText("온도 제어");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel4.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel4.setText("전원 제어");

        refSlider.setMaximum(6);
        refSlider.setValue(3);
        refSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                refSliderStateChanged(evt);
            }
        });
        refSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                refSliderMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                refSliderMouseReleased(evt);
            }
        });

        refOnBtn.setBackground(new java.awt.Color(0, 0, 0));
        refOnBtn.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        refOnBtn.setForeground(new java.awt.Color(255, 255, 255));
        refOnBtn.setText("ON");
        refOnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refOnBtnActionPerformed(evt);
            }
        });

        refOffBtn.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        refOffBtn.setText("OFF");
        refOffBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refOffBtnActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel18.setText("현재 냉장실 온도");

        jLabel19.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel19.setText("현재 전원 상태");

        refTempLabel.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        refTempLabel.setForeground(new java.awt.Color(0, 153, 255));
        refTempLabel.setText("현재 온도");

        refOnOffLabel.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        refOnOffLabel.setForeground(new java.awt.Color(0, 153, 255));
        refOnOffLabel.setText("OFF");

        jLabel22.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel22.setText("현재 전력 사용량");

        refELabel.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        refELabel.setForeground(new java.awt.Color(0, 153, 255));
        refELabel.setText("0  KWh");

        jMenu3.setText("메뉴");

        jMenu4.setText("뒤로가기");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu3.add(jMenu4);

        jMenuBar2.add(jMenu3);

        refFrame.setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout refFrameLayout = new javax.swing.GroupLayout(refFrame.getContentPane());
        refFrame.getContentPane().setLayout(refFrameLayout);
        refFrameLayout.setHorizontalGroup(
            refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator5)
            .addGroup(refFrameLayout.createSequentialGroup()
                .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(refFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(refFrameLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(refFrameLayout.createSequentialGroup()
                                .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel22))
                                .addGap(28, 28, 28)
                                .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(refELabel)
                                    .addComponent(refTempLabel)))
                            .addGroup(refFrameLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(28, 28, 28)
                                .addComponent(refOnOffLabel))))
                    .addGroup(refFrameLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(38, 38, 38)
                        .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(refFrameLayout.createSequentialGroup()
                                .addComponent(refOnBtn)
                                .addGap(44, 44, 44)
                                .addComponent(refOffBtn))
                            .addComponent(refSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        refFrameLayout.setVerticalGroup(
            refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(refFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(refOnBtn)
                    .addComponent(refOffBtn))
                .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(refFrameLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel3))
                    .addGroup(refFrameLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(refSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(refOnOffLabel))
                .addGap(18, 18, 18)
                .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(refTempLabel))
                .addGap(18, 18, 18)
                .addGroup(refFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(refELabel))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jLabel29.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel29.setText("현재 LED 밝기");

        ledRoom1OnOffLabel.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        ledRoom1OnOffLabel.setForeground(new java.awt.Color(0, 153, 255));
        ledRoom1OnOffLabel.setText("jLabel24");

        jLabel30.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel30.setText("현재 전원 상태");

        jLabel31.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel31.setText("밝기 제어");
        jLabel31.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        ledLivingRoomTempLabel.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        ledLivingRoomTempLabel.setForeground(new java.awt.Color(0, 153, 255));
        ledLivingRoomTempLabel.setText("jLabel22");

        jLabel32.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel32.setText("전원 제어");

        ledLivingRoomOnOffLabel.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        ledLivingRoomOnOffLabel.setForeground(new java.awt.Color(0, 153, 255));
        ledLivingRoomOnOffLabel.setText("jLabel24");

        ledRoom1Slider.setMaximum(5);
        ledRoom1Slider.setMinimum(1);
        ledRoom1Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ledRoom1SliderStateChanged(evt);
            }
        });
        ledRoom1Slider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ledRoom1SliderMouseReleased(evt);
            }
        });
        ledRoom1Slider.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                ledRoom1Slidernone(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("맑은 고딕", 1, 20)); // NOI18N
        jLabel33.setText("LED 제어");

        jLabel34.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel34.setText("거실");

        jLabel35.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel35.setText("밝기 제어");
        jLabel35.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel36.setFont(new java.awt.Font("맑은 고딕", 0, 17)); // NOI18N
        jLabel36.setText("현재 전력 사용량");

        ledOnRoom1Btn.setBackground(new java.awt.Color(0, 0, 0));
        ledOnRoom1Btn.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        ledOnRoom1Btn.setForeground(new java.awt.Color(255, 255, 255));
        ledOnRoom1Btn.setText("ON");
        ledOnRoom1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledOnRoom1BtnActionPerformed(evt);
            }
        });

        ledELabel.setFont(new java.awt.Font("맑은 고딕", 0, 17)); // NOI18N
        ledELabel.setForeground(new java.awt.Color(0, 153, 255));
        ledELabel.setText("0 kwh");

        jLabel37.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel37.setText("전원 제어");

        ledOffRoom1Btn.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        ledOffRoom1Btn.setText("OFF");
        ledOffRoom1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledOffRoom1BtnActionPerformed(evt);
            }
        });

        ledLivingRoomSlider.setMaximum(5);
        ledLivingRoomSlider.setMinimum(1);
        ledLivingRoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ledLivingRoomSliderStateChanged(evt);
            }
        });
        ledLivingRoomSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ledLivingRoomSliderMouseReleased(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel38.setText("현재 LED 밝기");

        ledOnLivingRoomBtn.setBackground(new java.awt.Color(0, 0, 0));
        ledOnLivingRoomBtn.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        ledOnLivingRoomBtn.setForeground(new java.awt.Color(255, 255, 255));
        ledOnLivingRoomBtn.setText("ON");
        ledOnLivingRoomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledOnLivingRoomBtnActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel39.setText("현재 전원 상태");

        ledOffLivingRoomBtn.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        ledOffLivingRoomBtn.setText("OFF");
        ledOffLivingRoomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledOffLivingRoomBtnActionPerformed(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel40.setText("침실");

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator7.setToolTipText("");

        ledRoom1TempLabel.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        ledRoom1TempLabel.setForeground(new java.awt.Color(0, 153, 255));
        ledRoom1TempLabel.setText("0");

        jMenu5.setText("메뉴");

        jMenu6.setText("뒤로가기");
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenu5.add(jMenu6);

        jMenuBar3.add(jMenu5);

        ledFrame.setJMenuBar(jMenuBar3);

        javax.swing.GroupLayout ledFrameLayout = new javax.swing.GroupLayout(ledFrame.getContentPane());
        ledFrame.getContentPane().setLayout(ledFrameLayout);
        ledFrameLayout.setHorizontalGroup(
            ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ledFrameLayout.createSequentialGroup()
                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ledFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel33)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(ledFrameLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ledFrameLayout.createSequentialGroup()
                                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel30))
                                .addGap(39, 39, 39)
                                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ledLivingRoomOnOffLabel)
                                    .addComponent(ledLivingRoomTempLabel)))
                            .addGroup(ledFrameLayout.createSequentialGroup()
                                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(32, 32, 32)
                                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ledLivingRoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(ledFrameLayout.createSequentialGroup()
                                        .addComponent(ledOnLivingRoomBtn)
                                        .addGap(43, 43, 43)
                                        .addComponent(ledOffLivingRoomBtn))))
                            .addComponent(jLabel34))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ledFrameLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ledFrameLayout.createSequentialGroup()
                                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel39))
                                .addGap(39, 39, 39)
                                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ledRoom1OnOffLabel)
                                    .addComponent(ledRoom1TempLabel)))
                            .addGroup(ledFrameLayout.createSequentialGroup()
                                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel32)
                                    .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel40))
                                .addGap(32, 32, 32)
                                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ledRoom1Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(ledFrameLayout.createSequentialGroup()
                                        .addComponent(ledOnRoom1Btn)
                                        .addGap(43, 43, 43)
                                        .addComponent(ledOffRoom1Btn)))))
                        .addGap(0, 50, Short.MAX_VALUE))
                    .addGroup(ledFrameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel36)
                        .addGap(43, 43, 43)
                        .addComponent(ledELabel)
                        .addGap(32, 32, 32))))
        );
        ledFrameLayout.setVerticalGroup(
            ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ledFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ledFrameLayout.createSequentialGroup()
                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(ledFrameLayout.createSequentialGroup()
                                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel38)
                                        .addComponent(ledRoom1TempLabel))
                                    .addGap(18, 18, 18)
                                    .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel39)
                                        .addComponent(ledRoom1OnOffLabel)))
                                .addGroup(ledFrameLayout.createSequentialGroup()
                                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(44, 44, 44)
                                    .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel37)
                                        .addComponent(ledOnLivingRoomBtn)
                                        .addComponent(ledOffLivingRoomBtn))
                                    .addGap(50, 50, 50)
                                    .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ledLivingRoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel35))
                                    .addGap(89, 89, 89)
                                    .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel29)
                                        .addComponent(ledLivingRoomTempLabel))
                                    .addGap(18, 18, 18)
                                    .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel30)
                                        .addComponent(ledLivingRoomOnOffLabel))))))
                    .addGroup(ledFrameLayout.createSequentialGroup()
                        .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel36)
                            .addComponent(ledELabel))
                        .addGap(89, 89, 89)
                        .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(ledOnRoom1Btn)
                            .addComponent(ledOffRoom1Btn))
                        .addGap(47, 47, 47)
                        .addGroup(ledFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ledRoom1Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31))))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("맑은 고딕", 1, 20)); // NOI18N
        jLabel8.setText("난방 제어");

        jLabel9.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel9.setText("온도 제어");
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel10.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel10.setText("전원 제어");

        heatingLivingRoomSlider.setMaximum(30);
        heatingLivingRoomSlider.setMinimum(5);
        heatingLivingRoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                heatingLivingRoomSliderStateChanged(evt);
            }
        });
        heatingLivingRoomSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                heatingLivingRoomSliderMouseReleased(evt);
            }
        });

        heatingOnLivingRoomBtn.setBackground(new java.awt.Color(0, 0, 0));
        heatingOnLivingRoomBtn.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        heatingOnLivingRoomBtn.setForeground(new java.awt.Color(255, 255, 255));
        heatingOnLivingRoomBtn.setText("ON");
        heatingOnLivingRoomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heatingOnLivingRoomBtnActionPerformed(evt);
            }
        });

        heatingOffLivingRoomBtn.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        heatingOffLivingRoomBtn.setText("OFF");
        heatingOffLivingRoomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heatingOffLivingRoomBtnActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setToolTipText("");

        jLabel14.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel14.setText("현재 난방 온도");

        jLabel15.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel15.setText("현재 전원 상태");

        heatingLivingRoomTempLabel.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        heatingLivingRoomTempLabel.setForeground(new java.awt.Color(0, 153, 255));
        heatingLivingRoomTempLabel.setText("jLabel22");

        livingRoomLabel2.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        livingRoomLabel2.setForeground(new java.awt.Color(0, 153, 255));
        livingRoomLabel2.setText("jLabel24");

        jLabel21.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel21.setText("거실");

        heatingOnRoom1Btn.setBackground(new java.awt.Color(0, 0, 0));
        heatingOnRoom1Btn.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        heatingOnRoom1Btn.setForeground(new java.awt.Color(255, 255, 255));
        heatingOnRoom1Btn.setText("ON");
        heatingOnRoom1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heatingOnRoom1BtnActionPerformed(evt);
            }
        });

        heatingOffRoom2Btn.setFont(new java.awt.Font("맑은 고딕", 0, 14)); // NOI18N
        heatingOffRoom2Btn.setText("OFF");
        heatingOffRoom2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heatingOffRoom2BtnActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel23.setText("현재 난방 온도");

        jLabel24.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel24.setText("현재 전원 상태");

        jLabel25.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel25.setText("침실");

        heatingRoom1TempLabel.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        heatingRoom1TempLabel.setForeground(new java.awt.Color(0, 153, 255));
        heatingRoom1TempLabel.setText("0");

        heatingRoom1OnOffLabel.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        heatingRoom1OnOffLabel.setForeground(new java.awt.Color(0, 153, 255));
        heatingRoom1OnOffLabel.setText("jLabel24");

        jLabel26.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel26.setText("온도 제어");
        jLabel26.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel27.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel27.setText("전원 제어");

        heatingRoom1Slider.setMaximum(30);
        heatingRoom1Slider.setMinimum(5);
        heatingRoom1Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                heatingRoom1SliderStateChanged(evt);
            }
        });
        heatingRoom1Slider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                heatingRoom1SliderMouseReleased(evt);
            }
        });
        heatingRoom1Slider.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                none(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("맑은 고딕", 0, 17)); // NOI18N
        jLabel28.setText("현재 전력 사용량");

        heatingELabel.setFont(new java.awt.Font("맑은 고딕", 0, 17)); // NOI18N
        heatingELabel.setForeground(new java.awt.Color(0, 153, 255));
        heatingELabel.setText("0 kwh");

        jMenu7.setText("메뉴");
        jMenu7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu7MouseClicked(evt);
            }
        });

        jMenu8.setText("뒤로가기");
        jMenu8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu8MouseClicked(evt);
            }
        });
        jMenu7.add(jMenu8);

        jMenuBar4.add(jMenu7);

        heatingFrame.setJMenuBar(jMenuBar4);

        javax.swing.GroupLayout heatingFrameLayout = new javax.swing.GroupLayout(heatingFrame.getContentPane());
        heatingFrame.getContentPane().setLayout(heatingFrameLayout);
        heatingFrameLayout.setHorizontalGroup(
            heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(heatingFrameLayout.createSequentialGroup()
                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(heatingFrameLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(heatingFrameLayout.createSequentialGroup()
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel15))
                                .addGap(39, 39, 39)
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(livingRoomLabel2)
                                    .addComponent(heatingLivingRoomTempLabel)))
                            .addGroup(heatingFrameLayout.createSequentialGroup()
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(32, 32, 32)
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(heatingFrameLayout.createSequentialGroup()
                                        .addComponent(heatingOnLivingRoomBtn)
                                        .addGap(43, 43, 43)
                                        .addComponent(heatingOffLivingRoomBtn))
                                    .addComponent(heatingLivingRoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(heatingFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8))
                    .addGroup(heatingFrameLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel21)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(heatingFrameLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(heatingFrameLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(heatingFrameLayout.createSequentialGroup()
                                        .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel24))
                                        .addGap(39, 39, 39)
                                        .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(heatingRoom1OnOffLabel)
                                            .addComponent(heatingRoom1TempLabel)))
                                    .addGroup(heatingFrameLayout.createSequentialGroup()
                                        .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel27)
                                            .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(32, 32, 32)
                                        .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(heatingFrameLayout.createSequentialGroup()
                                                .addComponent(heatingOnRoom1Btn)
                                                .addGap(43, 43, 43)
                                                .addComponent(heatingOffRoom2Btn))
                                            .addComponent(heatingRoom1Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jLabel25))
                        .addGap(0, 54, Short.MAX_VALUE))
                    .addGroup(heatingFrameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel28)
                        .addGap(43, 43, 43)
                        .addComponent(heatingELabel)
                        .addGap(32, 32, 32))))
        );
        heatingFrameLayout.setVerticalGroup(
            heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(heatingFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(heatingFrameLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(heatingFrameLayout.createSequentialGroup()
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(heatingOnLivingRoomBtn)
                                    .addComponent(heatingOffLivingRoomBtn))
                                .addGap(50, 50, 50)
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(heatingLivingRoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(89, 89, 89)
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(heatingLivingRoomTempLabel))
                                .addGap(18, 18, 18)
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(livingRoomLabel2)))
                            .addGroup(heatingFrameLayout.createSequentialGroup()
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel23)
                                    .addComponent(heatingRoom1TempLabel))
                                .addGap(18, 18, 18)
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel24)
                                    .addComponent(heatingRoom1OnOffLabel)))
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(heatingFrameLayout.createSequentialGroup()
                        .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(heatingELabel))
                        .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(heatingFrameLayout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel27)
                                    .addComponent(heatingOnRoom1Btn)
                                    .addComponent(heatingOffRoom2Btn)))
                            .addGroup(heatingFrameLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47)
                        .addGroup(heatingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(heatingRoom1Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)))))
        );

        jLabel20.setText("jLabel20");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("맑은 고딕", 1, 20)); // NOI18N
        jLabel1.setText("기기제어");

        btn_heatingCommand.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        btn_heatingCommand.setText("난방 제어");
        btn_heatingCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_heatingCommandActionPerformed(evt);
            }
        });

        btn_ledCommand.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        btn_ledCommand.setText("LED 조명 제어");
        btn_ledCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ledCommandActionPerformed(evt);
            }
        });

        btn_refCommand.setFont(new java.awt.Font("맑은 고딕", 1, 16)); // NOI18N
        btn_refCommand.setText("냉장고 제어");
        btn_refCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refCommandActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel11.setText("난방의 온도 및 전원을 제어합니다.");

        jLabel12.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel12.setText("LED 조명의 밝기 및 전원을 제어합니다.");

        jLabel13.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        jLabel13.setText("냉장고의 온도 및 전원을 제어합니다.");

        commandMainLabel.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        commandMainLabel.setText("현재 기기 전력 사용량");

        usedELabel.setFont(new java.awt.Font("맑은 고딕", 0, 16)); // NOI18N
        usedELabel.setForeground(new java.awt.Color(0, 153, 204));
        usedELabel.setText("jLabel21");

        jMenu1.setText("메뉴");

        jMenu2.setText("뒤로가기");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenu2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_heatingCommand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_ledCommand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_refCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13))
                .addGap(36, 36, 36))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usedELabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(commandMainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                .addGap(16, 16, 16))
            .addComponent(jSeparator6)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(commandMainLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usedELabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_heatingCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(36, 36, 36)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_ledCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(27, 27, 27)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_refCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_ledCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ledCommandActionPerformed
        // TODO add your handling code here:
        this.dispose();
        ledFrame.setVisible(true); // LED 제어 화면
        ledFrame.setTitle("LED 조명 제어");
        ledFrame.setSize(859, 500);
        ledFrame.setLocation(900, 250);
        ledFrame.setResizable(false);
        ledFrame.setLocationRelativeTo(null);
        ledFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        if (ledLivingRoomOnOffState.equals("ON")) { // 전원 상태가 On이면 슬라이더 활성화
            ledLivingRoomSlider.setEnabled(true);
        } else if (ledLivingRoomOnOffState.equals("OFF")) { // 전원 상태가 Off이면 슬라이더 활성화
            ledLivingRoomSlider.setEnabled(false);
        }

        if (ledRoom1OnOffState.equals("ON")) {
            ledRoom1Slider.setEnabled(true);
        } else if (ledRoom1OnOffState.equals("OFF")) {
            ledRoom1Slider.setEnabled(false);
        }
    }//GEN-LAST:event_btn_ledCommandActionPerformed

    private void btn_heatingCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_heatingCommandActionPerformed
        // TODO add your handling code here:
        this.dispose();
        heatingFrame.setVisible(true); // 난방기 제어 화면
        heatingFrame.setTitle("난방 기기 제어");
        heatingFrame.setSize(859, 500);
        heatingFrame.setLocation(900, 250);
        heatingFrame.setResizable(false);
        heatingFrame.setLocationRelativeTo(null);
        heatingFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        if (heatingLivingRoomOnOffState.equals("ON")) { // 전원 상태가 On이면 슬라이더 활성화
            heatingLivingRoomSlider.setEnabled(true);
        } else if (heatingLivingRoomOnOffState.equals("OFF")) { // 전원 상태가 Off이면 슬라이더 활성화
            heatingLivingRoomSlider.setEnabled(false);
        }

        if (heatingRoom1OnOffState.equals("ON")) {
            heatingRoom1Slider.setEnabled(true);
        } else if (heatingRoom1OnOffState.equals("OFF")) {
            heatingRoom1Slider.setEnabled(false);
        }
    }//GEN-LAST:event_btn_heatingCommandActionPerformed

    private void btn_refCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refCommandActionPerformed
        // TODO add your handling code here:
        this.dispose();
        refFrame.setVisible(true);

        refFrame.setTitle("냉장고 제어");
        refFrame.setSize(500, 550);
        refFrame.setLocation(900, 250);
        refFrame.setResizable(false);
        refFrame.setLocationRelativeTo(null);

        if (refOnOffState.equals("ON")) { // 전원 상태가 On이면 슬라이더 활성화
            refSlider.setEnabled(true);
        } else if (refOnOffState.equals("OFF")) { // 전원 상태가 Off이면 슬라이더 활성화
            refSlider.setEnabled(false);
        }
    }//GEN-LAST:event_btn_refCommandActionPerformed

    private void refOnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refOnBtnActionPerformed
        // TODO add your handling code here:
        if (refOnOffState.equals("ON")) {
            JOptionPane.showMessageDialog(null, "이미 전원이 켜져있습니다.\n",
                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
            return;
        }

        refOnOffState = "ON";
        refOnOffLabel.setText(refOnOffState);
        refSlider.setEnabled(true);
        refSlider.setValue(3);
        refTempLabel.setText(refSlider.getValue() + "");

        RefrigeratorOnCommand kitchenRefrigeratorOn = new RefrigeratorOnCommand(kitchenRefrigerator); // on명령 생성 및 리시버 연결
        remote.setOnOffCommand(Receiver.REF.ordinal(), kitchenRefrigeratorOn, none); // 2번 슬롯(냉장고)의  on 명령 전달
        remote.onButtonWasPushed(Receiver.REF.ordinal()); // 2번 슬롯의 on 명령 실행

        refELabel.setText(kitchenRefrigerator.getUsedEnergy() + " KWh"); // 현재 냉장고 사용 전력을 화면 텍스트로 표시

        usedRefEnergy += kitchenRefrigerator.getUsedEnergy(); // 냉장고 누적 전기 사용량 

        usedEnergy += usedRefEnergy;
        usedELabel.setText(usedEnergy + ""); // 메인화면 전체 누적 전기 사용량
    }//GEN-LAST:event_refOnBtnActionPerformed

    private void refOffBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refOffBtnActionPerformed
        // TODO add your handling code here:
        if (refOnOffState.equals("OFF")) {
            JOptionPane.showMessageDialog(null, "이미 전원이 꺼져있습니다.\n",
                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
            return;
        }

        refOnOffState = "OFF";
        refOnOffLabel.setText(refOnOffState);
        refSlider.setEnabled(false);
        refTempLabel.setText(0 + "");

        RefrigeratorOffCommand kitchenRefrigeratorOff = new RefrigeratorOffCommand(kitchenRefrigerator); // off명령 생성 및 리시버 연결
        remote.setOnOffCommand(Receiver.REF.ordinal(), none, kitchenRefrigeratorOff); // 2번 슬롯(냉장고)의  off 명령 전달
        remote.offButtonWasPushed(Receiver.REF.ordinal());// 2번 슬롯의 off 명령 실행

        refELabel.setText("0 KWh");
        usedRefEnergy = 0;
        usedELabel.setText(usedEnergy + ""); // 메인화면 전체 누적 전기 사용량

    }//GEN-LAST:event_refOffBtnActionPerformed

    private void heatingOnLivingRoomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatingOnLivingRoomBtnActionPerformed
        // TODO add your handling code here:

        if (heatingLivingRoomOnOffState.equals("ON")) {
            JOptionPane.showMessageDialog(null, "이미 전원이 켜져있습니다.\n",
                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
            return;
        }

        heatingLivingRoomOnOffState = "ON";
        livingRoomLabel2.setText(heatingLivingRoomOnOffState); // 거실 난방 전원 텍스트 설정
        heatingLivingRoomSlider.setEnabled(true);  // 전원이 켜지면 온도조절 슬라이더를 사용가능하게 함. 
        heatingLivingRoomSlider.setValue(20); // 온도의 기본값으로 20도를 줌.
        heatingLivingRoomTempLabel.setText(heatingLivingRoomSlider.getValue() + ""); // 슬라이더에서 얻어온 값으로 거실 난방 온도 텍스트 설정.

        HeatingOnCommand livingRoomHeatingOn = new HeatingOnCommand(livingRoomHeating); // 커맨드 생성
        remote.setOnOffCommand(Receiver.HEATING.ordinal(), livingRoomHeatingOn, none);
        remote.onButtonWasPushed(Receiver.HEATING.ordinal()); // 0번 슬롯의 on 명령 실행

        usedHeatingEnergyLivingRoom += livingRoomHeating.getUsedEnergy(); // 난방기 누적 전기 사용량 업데이트
        heatingELabel.setText(usedHeatingEnergyLivingRoom + usedHeatingEnergyRoom1 + " KWh");
        
        usedEnergy += livingRoomHeating.getUsedEnergy();
        usedELabel.setText(usedEnergy + " KWh"); // 메인화면 전체 누적 전기 사용량
        System.out.println(usedEnergy);

        
        

    }//GEN-LAST:event_heatingOnLivingRoomBtnActionPerformed

    private void heatingOffLivingRoomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatingOffLivingRoomBtnActionPerformed
        // TODO add your handling code here:

        if (heatingLivingRoomOnOffState.equals("OFF")) {
            JOptionPane.showMessageDialog(null, "이미 전원이 꺼져있습니다.\n",
                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
            return;
        }
        heatingLivingRoomOnOffState = "OFF";
        livingRoomLabel2.setText(heatingLivingRoomOnOffState); // 거실 난방 전원 텍스트 설정
        heatingLivingRoomSlider.setEnabled(false);  // 전원이 켜지면 온도조절 슬라이더를 사용가능하게 함. 
        heatingLivingRoomTempLabel.setText(0 + ""); // 슬라이더에서 얻어온 값으로 거실 난방 온도 텍스트 설정.

        HeatingOffCommand livingRoomHeatingOff = new HeatingOffCommand(livingRoomHeating); // 커맨드 생성
        remote.setOnOffCommand(Receiver.HEATING.ordinal(), none, livingRoomHeatingOff);
        remote.offButtonWasPushed(Receiver.HEATING.ordinal());

        usedHeatingEnergyLivingRoom = 0;

        heatingELabel.setText(usedHeatingEnergyLivingRoom + usedHeatingEnergyRoom1 + " KWh");

        usedELabel.setText(usedEnergy + ""); // 메인화면 전체 누적 전기 사용량
        System.out.println(usedEnergy);
    }//GEN-LAST:event_heatingOffLivingRoomBtnActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
        MainDisplay dis = new MainDisplay();
        dis.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
        refFrame.dispose();
        this.setVisible(true);
        usedELabel.setText(usedEnergy + " KWh");
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        // TODO add your handling code here:
        ledFrame.dispose();
        this.setVisible(true);
        usedELabel.setText(usedEnergy + " KWh"); // 메인화면 전체 누적 전기 사용량
    }//GEN-LAST:event_jMenu6MouseClicked

    private void jMenu7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenu7MouseClicked

    private void jMenu8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu8MouseClicked
        // TODO add your handling code here:
        heatingFrame.dispose();
        this.setVisible(true);

        usedELabel.setText(usedEnergy + " KWh"); // 메인화면 전체 누적 전기 사용량
    }//GEN-LAST:event_jMenu8MouseClicked

    private void refSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_refSliderStateChanged
        // TODO add your handling code here:


    }//GEN-LAST:event_refSliderStateChanged

    private void heatingLivingRoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_heatingLivingRoomSliderStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_heatingLivingRoomSliderStateChanged

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:

        MainDisplay dis = new MainDisplay();
        dis.setVisible(true);
        setVisible(false);
        File_Command.write(uId, usedEnergy);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void refSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refSliderMouseReleased
        // TODO add your handling code here:

        refTempLabel.setText(refSlider.getValue() + "");

        if (refSlider.getValue() >= 0 && refSlider.getValue() <= 1) {
            JOptionPane.showMessageDialog(null, "적정 온도(2°C ~ 4°C)보다 낮은 온도로 설정하여 소비전력량이 증가합니다.\n");
            usedRefEnergy += 2;
            usedEnergy += 2;
        }
        if (refSlider.getValue() >= 2 && refSlider.getValue() <= 4) {
            usedRefEnergy += 1;
            usedEnergy += 1;
        }

        refELabel.setText(usedRefEnergy + " KWh");


    }//GEN-LAST:event_refSliderMouseReleased

    private void refSliderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refSliderMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_refSliderMousePressed

    private void heatingOnRoom1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatingOnRoom1BtnActionPerformed
        // TODO add your handling code here:

        if (heatingRoom1OnOffState.equals("ON")) {
            JOptionPane.showMessageDialog(null, "이미 전원이 켜져있습니다.\n",
                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
            return;
        }
        heatingRoom1OnOffState = "ON";
        heatingRoom1OnOffLabel.setText(heatingRoom1OnOffState); // 침실1 난방 전원 텍스트 설정
        heatingRoom1Slider.setEnabled(true);  // 전원이 켜지면 온도조절 슬라이더를 사용가능하게 함. 
        heatingRoom1Slider.setValue(20); // 온도의 기본값으로 20도를 줌.
        heatingRoom1TempLabel.setText(heatingRoom1Slider.getValue() + ""); // 슬라이더에서 얻어온 값으로 침실 난방 온도 텍스트 설정.

        HeatingOnCommand Room1HeatingOn = new HeatingOnCommand(room1Heating); // 커맨드 생성
        remote.setOnOffCommand(Receiver.HEATING.ordinal(), Room1HeatingOn, none);
        remote.onButtonWasPushed(Receiver.HEATING.ordinal()); // 0번 슬롯의 on 명령 실행

        usedHeatingEnergyRoom1 += room1Heating.getUsedEnergy(); // 난방기 누적 전기 사용량 업데이트

        heatingELabel.setText(usedHeatingEnergyRoom1 + usedHeatingEnergyLivingRoom + " KWh");
        usedEnergy += room1Heating.getUsedEnergy();
        System.out.println(usedEnergy);
        usedELabel.setText(usedEnergy + " KWh"); // 메인화면 전체 누적 전기 사용량


    }//GEN-LAST:event_heatingOnRoom1BtnActionPerformed

    private void heatingOffRoom2BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatingOffRoom2BtnActionPerformed
        // TODO add your handling code here:
        if (heatingRoom1OnOffState.equals("OFF")) {
            JOptionPane.showMessageDialog(null, "이미 전원이 꺼져있습니다.\n",
                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
            return;
        }
        heatingRoom1OnOffState = "OFF";
        heatingRoom1OnOffLabel.setText(heatingRoom1OnOffState); // 거실 난방 전원 텍스트 설정
        heatingRoom1Slider.setEnabled(false);  // 전원이 켜지면 온도조절 슬라이더를 사용가능하게 함. 
        heatingRoom1TempLabel.setText(0 + ""); // 슬라이더에서 얻어온 값으로 거실 난방 온도 텍스트 설정.

        HeatingOffCommand room1HeatingOff = new HeatingOffCommand(room1Heating); // 커맨드 생성
        remote.setOnOffCommand(Receiver.HEATING.ordinal(), none, room1HeatingOff);
        remote.offButtonWasPushed(Receiver.HEATING.ordinal());

        usedHeatingEnergyRoom1 = 0;

        heatingELabel.setText(usedHeatingEnergyRoom1 + usedHeatingEnergyLivingRoom + " KWh");
        System.out.println(usedEnergy);
        usedELabel.setText(usedEnergy + ""); // 메인화면 전체 누적 전기 사용량
    }//GEN-LAST:event_heatingOffRoom2BtnActionPerformed

    private void heatingRoom1SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_heatingRoom1SliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_heatingRoom1SliderStateChanged

    private void heatingLivingRoomSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_heatingLivingRoomSliderMouseReleased
        // TODO add your handling code here:

        heatingLivingRoomTempLabel.setText(heatingLivingRoomSlider.getValue() + "");

        if (heatingLivingRoomSlider.getValue() > 25 && heatingLivingRoomSlider.getValue() <= 30) {
            JOptionPane.showMessageDialog(null, "적정 온도(16°C ~ 25°C)보다 높은 온도로 설정하여 소비전력량이 증가합니다.\n");
            usedHeatingEnergyLivingRoom += 2;
            usedEnergy += 2;
        }

        heatingELabel.setText(usedHeatingEnergyLivingRoom + usedHeatingEnergyRoom1 + " KWh");
        usedELabel.setText(usedEnergy + ""); // 메인화면 전체 누적 전기 사용량
    }//GEN-LAST:event_heatingLivingRoomSliderMouseReleased

    private void none(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_none
        // TODO add your handling code here:

    }//GEN-LAST:event_none

    private void heatingRoom1SliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_heatingRoom1SliderMouseReleased
        // TODO add your handling code here:
        heatingRoom1TempLabel.setText(heatingRoom1Slider.getValue() + "");

        if (heatingRoom1Slider.getValue() > 25 && heatingRoom1Slider.getValue() <= 30) {
            JOptionPane.showMessageDialog(null, "적정 온도(16°C ~ 25°C)보다 높은 온도로 설정하여 소비전력량이 증가합니다.\n");
            usedHeatingEnergyRoom1 += 2;
            usedEnergy += 2;
        }

        heatingELabel.setText(usedHeatingEnergyRoom1 + usedHeatingEnergyLivingRoom + " KWh");
        usedELabel.setText(usedEnergy + ""); // 메인화면 전체 누적 전기 사용량
    }//GEN-LAST:event_heatingRoom1SliderMouseReleased

    private void ledRoom1SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ledRoom1SliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ledRoom1SliderStateChanged

    private void ledRoom1SliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ledRoom1SliderMouseReleased
        // TODO add your handling code here:
        // TODO add your handling code here:
        ledRoom1TempLabel.setText(ledRoom1Slider.getValue() + "");

        if (ledRoom1Slider.getValue() > 3) {
            JOptionPane.showMessageDialog(null, "적정 밝기단계(3단계)보다 높게 설정하여 소비전력량이 증가합니다.\n");
            usedLedEnergyRoom1 += 2;
            usedEnergy += 2;
        }

        ledELabel.setText(usedLedEnergyRoom1 + usedLedEnergyLivingRoom + " KWh");
        usedELabel.setText(usedEnergy + ""); // 메인화면 전체 누적 전기 사용량
    }//GEN-LAST:event_ledRoom1SliderMouseReleased

    private void ledRoom1Slidernone(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_ledRoom1Slidernone
        // TODO add your handling code here:
    }//GEN-LAST:event_ledRoom1Slidernone

    private void ledOnRoom1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledOnRoom1BtnActionPerformed
        // TODO add your handling code here:

        if (ledRoom1OnOffState.equals("ON")) {
            JOptionPane.showMessageDialog(null, "이미 전원이 켜져있습니다.\n",
                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ledRoom1OnOffState = "ON";
        ledRoom1OnOffLabel.setText(ledRoom1OnOffState); // 침실1 난방 전원 텍스트 설정
        ledRoom1Slider.setEnabled(true);  // 전원이 켜지면 온도조절 슬라이더를 사용가능하게 함. 
        ledRoom1Slider.setValue(3); // 온도의 기본값으로 20도를 줌.
        ledRoom1TempLabel.setText(ledRoom1Slider.getValue() + ""); // 슬라이더에서 얻어온 값으로 거실 난방 온도 텍스트 설정.

        LedOnCommand Room1LedOn = new LedOnCommand(room1Led); // 커맨드 생성
        remote.setOnOffCommand(Receiver.HEATING.ordinal(), Room1LedOn, none);
        remote.onButtonWasPushed(Receiver.HEATING.ordinal()); // 0번 슬롯의 on 명령 실행

        usedLedEnergyRoom1+=room1Led.getUsedEnergy(); 

         ledELabel.setText(usedLedEnergyLivingRoom + usedLedEnergyRoom1 + " KWh");
        usedEnergy += room1Led.getUsedEnergy();

        usedELabel.setText(usedEnergy + " KWh"); // 메인화면 전체 누적 전기 사용량
        System.out.println(usedEnergy);

    }//GEN-LAST:event_ledOnRoom1BtnActionPerformed

    private void ledOffRoom1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledOffRoom1BtnActionPerformed
        // TODO add your handling code here:
        if (ledRoom1OnOffState.equals("OFF")) {
            JOptionPane.showMessageDialog(null, "이미 전원이 꺼져있습니다.\n",
                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ledRoom1OnOffState = "OFF";
        ledRoom1OnOffLabel.setText(ledRoom1OnOffState); // 거실 난방 전원 텍스트 설정
        ledRoom1Slider.setEnabled(false);  // 전원이 켜지면 온도조절 슬라이더를 사용가능하게 함. 
        ledRoom1TempLabel.setText(0 + ""); // 슬라이더에서 얻어온 값으로 거실 난방 온도 텍스트 설정.

        LedOffCommand room1LedOff = new LedOffCommand(room1Led); // 커맨드 생성
        remote.setOnOffCommand(Receiver.LED.ordinal(), none, room1LedOff);
        remote.offButtonWasPushed(Receiver.LED.ordinal());

        
        usedLedEnergyRoom1=0;
        ledELabel.setText(usedLedEnergyLivingRoom + usedLedEnergyRoom1 + " KWh");
        System.out.println(usedEnergy);
        usedELabel.setText(usedEnergy + ""); // 메인화면 전체 누적 전기 사용량

    }//GEN-LAST:event_ledOffRoom1BtnActionPerformed

    private void ledLivingRoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ledLivingRoomSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ledLivingRoomSliderStateChanged

    private void ledLivingRoomSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ledLivingRoomSliderMouseReleased
        // TODO add your handling code here:
        ledLivingRoomTempLabel.setText(ledLivingRoomSlider.getValue() + "");

        if (ledLivingRoomSlider.getValue() > 3) {
            JOptionPane.showMessageDialog(null, "적정 밝기단계(3단계)보다 높게 설정하여 소비전력량이 증가합니다.\n");
            usedLedEnergyLivingRoom += 2;
            usedEnergy += 2;
        }

        ledELabel.setText(usedLedEnergyLivingRoom + usedLedEnergyRoom1 + " KWh");
        usedELabel.setText(usedEnergy + ""); // 메인화면 전체 누적 전기 사용량

    }//GEN-LAST:event_ledLivingRoomSliderMouseReleased

    private void ledOnLivingRoomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledOnLivingRoomBtnActionPerformed
        // TODO add your handling code here:
        if (ledLivingRoomOnOffState.equals("ON")) {
            JOptionPane.showMessageDialog(null, "이미 전원이 켜져있습니다.\n",
                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ledLivingRoomOnOffState = "ON";
        ledLivingRoomOnOffLabel.setText(ledLivingRoomOnOffState); // 거실 난방 전원 텍스트 설정
        ledLivingRoomSlider.setEnabled(true);  // 전원이 켜지면 온도조절 슬라이더를 사용가능하게 함. 
        ledLivingRoomSlider.setValue(3); // 온도의 기본값으로 20도를 줌.
        ledLivingRoomTempLabel.setText(ledLivingRoomSlider.getValue() + ""); // 슬라이더에서 얻어온 값으로 거실 난방 온도 텍스트 설정.

        LedOnCommand livingRoomLedOn = new LedOnCommand(livingRoomLed); // 커맨드 생성
        remote.setOnOffCommand(Receiver.LED.ordinal(), livingRoomLedOn, none);
        remote.onButtonWasPushed(Receiver.LED.ordinal()); // 0번 슬롯의 on 명령 실행

        usedLedEnergyLivingRoom+= livingRoomLed.getUsedEnergy();

        ledELabel.setText(usedLedEnergyLivingRoom + usedLedEnergyRoom1 + " KWh");
        usedEnergy += livingRoomLed.getUsedEnergy();
        usedELabel.setText(usedEnergy + " KWh"); // 메인화면 전체 누적 전기 사용량


    }//GEN-LAST:event_ledOnLivingRoomBtnActionPerformed

    private void ledOffLivingRoomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledOffLivingRoomBtnActionPerformed
        // TODO add your handling code here:

        if (ledLivingRoomOnOffState.equals("OFF")) {
            JOptionPane.showMessageDialog(null, "이미 전원이 꺼져있습니다.\n",
                    "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ledLivingRoomOnOffState = "OFF";
        ledLivingRoomOnOffLabel.setText(ledLivingRoomOnOffState); // 거실 난방 전원 텍스트 설정
        ledLivingRoomSlider.setEnabled(false);  // 전원이 켜지면 온도조절 슬라이더를 사용가능하게 함. 
        ledLivingRoomTempLabel.setText(0 + ""); // 슬라이더에서 얻어온 값으로 거실 난방 온도 텍스트 설정.

        LedOffCommand livingRoomLedOff = new LedOffCommand(livingRoomLed); // 커맨드 생성
        remote.setOnOffCommand(Receiver.LED.ordinal(), none, livingRoomLedOff);
        remote.offButtonWasPushed(Receiver.LED.ordinal());
        
        usedLedEnergyLivingRoom = 0;

        ledELabel.setText(usedLedEnergyLivingRoom + usedLedEnergyRoom1 + " KWh");

        usedELabel.setText(usedEnergy + ""); // 메인화면 전체 누적 전기 사용량
        System.out.println(usedEnergy);
    }//GEN-LAST:event_ledOffLivingRoomBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_Command.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_Command.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_Command.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_Command.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_Command().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_heatingCommand;
    private javax.swing.JButton btn_ledCommand;
    private javax.swing.JButton btn_refCommand;
    private javax.swing.JLabel commandMainLabel;
    private javax.swing.JLabel heatingELabel;
    private javax.swing.JFrame heatingFrame;
    private javax.swing.JSlider heatingLivingRoomSlider;
    private javax.swing.JLabel heatingLivingRoomTempLabel;
    private javax.swing.JButton heatingOffLivingRoomBtn;
    private javax.swing.JButton heatingOffRoom2Btn;
    private javax.swing.JButton heatingOnLivingRoomBtn;
    private javax.swing.JButton heatingOnRoom1Btn;
    private javax.swing.JLabel heatingRoom1OnOffLabel;
    private javax.swing.JSlider heatingRoom1Slider;
    private javax.swing.JLabel heatingRoom1TempLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JLabel ledELabel;
    private javax.swing.JFrame ledFrame;
    private javax.swing.JLabel ledLivingRoomOnOffLabel;
    private javax.swing.JSlider ledLivingRoomSlider;
    private javax.swing.JLabel ledLivingRoomTempLabel;
    private javax.swing.JButton ledOffLivingRoomBtn;
    private javax.swing.JButton ledOffRoom1Btn;
    private javax.swing.JButton ledOnLivingRoomBtn;
    private javax.swing.JButton ledOnRoom1Btn;
    private javax.swing.JLabel ledRoom1OnOffLabel;
    private javax.swing.JSlider ledRoom1Slider;
    private javax.swing.JLabel ledRoom1TempLabel;
    private javax.swing.JLabel livingRoomLabel2;
    private javax.swing.JLabel refELabel;
    private javax.swing.JFrame refFrame;
    private javax.swing.JButton refOffBtn;
    private javax.swing.JButton refOnBtn;
    private javax.swing.JLabel refOnOffLabel;
    private javax.swing.JSlider refSlider;
    private javax.swing.JLabel refTempLabel;
    private javax.swing.JLabel usedELabel;
    // End of variables declaration//GEN-END:variables
}
